# Imports corretos para Google ADK
from google.adk.agents import LlmAgent
from google.adk.agents import Agent
from google.adk.models.lite_llm import LiteLlm
import os
from pathlib import Path
from dotenv import load_dotenv
from pdf2docx import Converter
from docx import Document

load_dotenv()

OpenAi_model = LiteLlm(
    model="gpt-4o", 
    api_key=os.getenv('OPENAI_API_KEY')
)

DeepSeek_model = LiteLlm(
    model="deepseek/deepseek-chat",
    api_key=os.getenv('DEEPSEEK_API_KEY')
)

# Configura√ß√£o dos caminhos - usando vari√°veis de ambiente para flexibilidade
BASE_PATH = os.getenv('DOCUMENTS_PATH', r"D:\cod\Arsae\Adk\Projeto_Adk_resolucoes\Adm_agentes\documentos")

# Verificar e criar diret√≥rios se necess√°rio
def ensure_directories():
    """Garante que os diret√≥rios necess√°rios existam."""
    try:
        os.makedirs(BASE_PATH, exist_ok=True)
        return True
    except Exception as e:
        print(f"Erro ao criar diret√≥rios: {str(e)}")
        return False

def list_pdfs() -> list:
    """Lista todos os arquivos PDF dispon√≠veis."""
    try:
        if not os.path.exists(BASE_PATH):
            print(f"Diret√≥rio {BASE_PATH} n√£o existe.")
            return []
        
        pdfs = [f for f in os.listdir(BASE_PATH) if f.lower().endswith('.pdf')]
        return pdfs
    
    except Exception as e:
        print(f"Erro ao listar arquivos: {str(e)}")
        return []

def converter_pdf_para_docx(pdf_path: str, docx_path: str) -> bool:
    """
    Converte um arquivo PDF para DOCX.
    
    Args:
        pdf_path (str): Caminho completo para o arquivo PDF
        docx_path (str): Caminho completo para o arquivo DOCX de sa√≠da
    
    Returns:
        bool: True se a convers√£o foi bem-sucedida, False caso contr√°rio
    """
    try:
        if not os.path.exists(pdf_path):
            print(f"Arquivo PDF n√£o encontrado: {pdf_path}")
            return False
            
        cv = Converter(pdf_path)
        cv.convert(docx_path)
        cv.close()
        print(f"PDF convertido com sucesso: {os.path.basename(pdf_path)}")
        return True
    except Exception as e:
        print(f"Erro ao converter PDF para DOCX ({os.path.basename(pdf_path)}): {str(e)}")
        return False

def analisar_texto_riscado(docx_path: str) -> dict:
    """
    Analisa o documento DOCX procurando por texto riscado.
    
    Args:
        docx_path (str): Caminho para o arquivo DOCX
    
    Returns:
        dict: Dicion√°rio com textos riscados e normais
    """
    try:
        if not os.path.exists(docx_path):
            print(f"Arquivo DOCX n√£o encontrado: {docx_path}")
            return {"textos_riscados": [], "textos_normais": [], "erro": "Arquivo n√£o encontrado"}
        
        doc = Document(docx_path)
        textos_riscados = []
        textos_normais = []

        for paragraph in doc.paragraphs:
            texto = paragraph.text.strip()
            if not texto:
                continue

            tem_risco = False
            for run in paragraph.runs:
                if run.font.strike:
                    tem_risco = True
                    break

            if tem_risco:
                textos_riscados.append(texto)
                print(f"Texto riscado encontrado: {texto[:50]}...")
            else:
                textos_normais.append(texto)

        print(f"An√°lise completa - Textos riscados: {len(textos_riscados)}, Textos normais: {len(textos_normais)}")
        
        return {
            #"textos_riscados": textos_riscados,
            "textos_normais": textos_normais,
            "total_paragrafos": len(textos_riscados) + len(textos_normais)
        }

    except Exception as e:
        print(f"Erro ao analisar documento DOCX: {str(e)}")
        return {"textos_riscados": [], "textos_normais": [], "erro": str(e)}

def obter_dados_processados()-> dict:
    """
    Processa todos os PDFs convertendo para DOCX e analisando o texto riscado.
    
    Returns:
        dict: Dicion√°rio com resultados do processamento de cada arquivo
    """
    # Garantir que os diret√≥rios existam
    if not ensure_directories():
        return {"erro": "N√£o foi poss√≠vel criar/acessar os diret√≥rios necess√°rios"}
    
    resultados = {}
    arquivos_pdf = list_pdfs()
    
    if not arquivos_pdf:
        return {"erro": "Nenhum arquivo PDF encontrado", "arquivos_processados": 0}
    
    print(f"Encontrados {len(arquivos_pdf)} arquivos PDF para processar")
    
    for arquivo_pdf in arquivos_pdf:
        print(f"\nProcessando: {arquivo_pdf}")
        
        # Construir caminhos completos
        pdf_path = os.path.join(BASE_PATH, arquivo_pdf)
        nome_base = os.path.splitext(arquivo_pdf)[0]
        docx_path = os.path.join(BASE_PATH, f"{nome_base}.docx")
        
        # Converter PDF para DOCX
        sucesso_conversao = converter_pdf_para_docx(pdf_path, docx_path)
        
        if sucesso_conversao:
            # Analisar texto riscado
            resultado_analise = analisar_texto_riscado(docx_path)
            resultados[arquivo_pdf] = {
                "convertido": True,
                "caminho_docx": docx_path,
                "analise": resultado_analise
            }
        else:
            resultados[arquivo_pdf] = {
                "convertido": False,
                "erro": "Falha na convers√£o",
                "analise": None
            }
    
    print(f"\nProcessamento conclu√≠do. {len(resultados)} arquivos processados.")
    return {
        "arquivos_processados": len(resultados),
        "resultados": resultados,
        "sucesso": True
    }

# Agent para an√°lise de contradi√ß√µes
Contradicao = Agent(
    model = "gemini-2.5-flash",
    name="Contradicao",
    description="Agent responsible for analyzing contradictions in resolutions.",
    instruction=f"""
    You are a specialist in finding contradictions in documents.
    
    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - processar_pdf() -> dict - Process all PDF files to extract content in a dictionary format
    - obter_dados_processados() -> dict - Get processed data for analysis
  
    INSTRUCTIONS:

    calm down, you don't need to rush, you have all the time in the world to analyze the documents.

    1. Use obter_dados_processados() to get all document content processed
    2. Analyze the extracted text looking for contradictions between resolutions
        ANALYSIS METHODOLOGY:
        1. Group texts by similar themes/subjects
        2. Compare statements within each group
        3. Identify conflicting statements
        4. Check if the context is really comparable
        5. Document contradictions found
    
    3. Contradictions can be within one document or across multiple documents
    4. Check all resolutions between all processed documents
    
    5. What is a contradiction?
        In the context of document analysis by AI models, a contradiction occurs when two or more documents (or resolutions) make directly opposing claims about the same subject or topic within a comparable context.
        Key considerations for contradiction detection:
        Contextual alignment is essential: The AI must evaluate the semantic context, not just perform keyword matching.
        Topic consistency: Both statements must refer to the same topic or entity. Differences across unrelated subjects do not constitute a contradiction.
        Temporal and conditional scope: Dates, conditions, and specific circumstances must also align. Contradictions only exist when both statements apply to the same time frame and scenario.
        Example scenario for AI contradiction detection:
        Document A: "The water tariff will increase in July 2025."
        Document B: "The water tariff will decrease in July 2025."
        ‚Üí This represents a clear contradiction: same topic, same time frame, opposite claims.
        Non-contradiction example (different topics):
        Document A: "The water tariff will increase in July 2025."
        Document B: "Wastewater treatment charges will decrease in July 2025."
        ‚Üí No contradiction: different topics.

    6. Cite the specific excerpts from the documents where contradictions occur
    7. Focus only on content contradictions, not grammar errors or formatting issues
    8. If no contradictions are found, clearly state that no contradictions were detected
    9. Be objective and clear in your responses
    10. When activated, perform your analysis without waiting for additional instructions
    11. Save your analysis results in the output for validation by Adm_agentes
    12. When you finish your job, transfer to OrtografiaGramatica 

    RESPONSE FORMAT:
    ----------------------------------------------------------------------------------------------------------------
    AN√ÅLISE DE CONTRADI√á√ïES:
    
    - Documentos analisados: [lista dos arquivos processados]
    - N√∫mero de contradi√ß√µes encontradas: [n√∫mero]
    
    Para cada contradi√ß√£o encontrada, use o seguinte formato:
    
    Contradi√ß√£o [n√∫mero]:
    
    üìÑ Documento: [nome do documento 1]
    üìç Localiza√ß√£o: [par√°grafo/se√ß√£o espec√≠fica]
    üìù Trecho: "[trecho exato do texto]"
    
    üìÑ Documento: [nome do documento 2]  
    üìç Localiza√ß√£o: [par√°grafo/se√ß√£o espec√≠fica]
    üìù Trecho: "[trecho exato do texto]"
    
    üîç Explica√ß√£o da Contradi√ß√£o:
    [Detalhes claros sobre como os trechos se contradizem]
    
    ----------------------------------------------------------------------------------------------------------------

    IMPORTANT:
    - When you finish your job, transfer to OrtografiaGramatica
    - Always call obter_dados_processados() first to get the processed data
    - Thoroughly analyze all available text content
    - Save your complete analysis for validation by Adm_agentes
    """,
    tools=[list_pdfs, obter_dados_processados],
    output_key="analise_contradicoes"
)

OrtografiaGramatica = Agent(
    model="gemini-2.5-flash",
    name="OrtografiaGramatica",
    description="Agent responsible for analyzing orthographic and grammatical correctness of documents.",
    instruction=f"""
    You are a specialist in orthographic and grammatical revision of technical documents written in Portuguese (Brazil), aligned with the Acordo Ortogr√°fico da L√≠ngua Portuguesa and standard grammar norms.

    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - processar_pdf() -> dict - Process all PDF files to extract content in a dictionary format
    - obter_dados_processados() -> dict - Get processed data for analysis

    INSTRUCTIONS:

    üìå Objective: Identify and suggest corrections for spelling and grammar errors in the provided documents.

    0- Always show your response before pass to the next agent
    1- Use obter_dados_processados() to access the textual content of the documents
    2- Carefully read all the extracted content
    3- Analyze the texts based on the norms of the Portuguese language (spelling, agreement, regency, punctuation, correct use of verb tenses, etc.)
    4- Point out the identified errors and suggest the correct form of writing
    5 -Pay special attention to common mistakes such as:
        Letter changes or outdated spelling (e.g., "id√©ia" ‚Üí "ideia")
    6- Subject-verb and noun-adjective agreement
    7- Improper or missing punctuation
    8- Grammatical ambiguities
    9- Improper use of pronouns and connectors

    ‚ùå The agent should not be concerned with formatting, writing style, or technical content ‚Äî focus exclusively on formal written Portuguese language.

    1- Use exact excerpts from the documents when pointing out errors
    2- Be objective, technical, and precise in your suggestions
    3- If no errors are found, clearly indicate that the document complies with grammatical and orthographic norms
    4- At the end of the analysis, transfer to Ambiguidade

    RESPONSE FORMAT:
    ORTHOGRAPHY AND GRAMMAR ANALYSIS:

    Documents analyzed: [list of processed files]
    Total errors identified: [total number]

    For each identified error, use the following format:

    Erro [n√∫mero]:
    üìÑ Documento: [nome do documento]
    üìç Localiza√ß√£o: [par√°grafo/se√ß√£o/p√°gina, se dispon√≠vel]
    ‚ùå Trecho original: "[trecho com erro]"
    ‚úÖ Sugest√£o de corre√ß√£o: "[trecho corrigido]"
    üìö Tipo de erro: [Ortografia | Concord√¢ncia verbal | Concord√¢ncia nominal | Reg√™ncia | Pontua√ß√£o | Outro]
    üí° Justificativa: [explica√ß√£o breve sobre a regra gramatical ou ortogr√°fica violada]

    ----------------------------------------------------------------------------------------------------------------

    IMPORTANT:
    - Always show your response before pass to the next agent
    - Always call obter_dados_processados() first to get the processed text
    - Carefully examine all sections of the document
    - Do not invent erros ‚Äî only point out what clearly violates formal Portuguese
    - Save your analysis output for Ambiguidade 
    """,
    tools=[list_pdfs, obter_dados_processados],
    output_key="analise_ortografia_gramatica"
)


Ambiguidade = Agent(
    model="gemini-2.5-flash",
    name="Ambiguidade",
    description="Agent responsible for identifying ambiguous phrases in resolutions.",
    instruction=f"""
    You are a specialist in identifying ambiguities in technical and legal documents.

    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - processar_pdf() -> dict - Process all PDF files to extract content in a dictionary format
    - obter_dados_processados() -> dict - Get processed data for analysis

    INSTRUCTIONS:

    calm down, you don't need to rush, you have all the time in the world to analyze the documents.

    1. Use obter_dados_processados() to get all document content processed
    2. Analyze the extracted text looking for ambiguous expressions that may cause interpretation issues

    üîç ANALYSIS METHODOLOGY:
        1. Read the text carefully, sentence by sentence
        2. Identify phrases or expressions that may have **more than one possible meaning**
        3. Evaluate whether the ambiguity arises from:
           - Lexical ambiguity (word with multiple meanings)
           - Syntactic ambiguity (unclear sentence structure)
           - Referential ambiguity (unclear pronoun or subject reference)
           - Scope ambiguity (unclear which part of the sentence an element applies to)
           - Implicit assumptions or missing information
        4. Suggest how the sentence could be rewritten to eliminate ambiguity
        5. Be precise and objective

    üìò WHAT IS AN AMBIGUITY?

    Ambiguity occurs when a sentence or phrase allows **two or more possible interpretations**, causing uncertainty or confusion. It is problematic in legal, technical, and regulatory documents because it can lead to **misinterpretations, legal loopholes, or conflicting understandings**.

    üîÅ Types of ambiguity:
    - **Lexical ambiguity:** "banco" (could be a financial institution or a bench)
    - **Syntactic ambiguity:** "O gerente demitiu o funcion√°rio com problemas" ‚Üí Who has the problems? The manager or the employee?
    - **Referential ambiguity:** "Foi decidido que ele ser√° o respons√°vel." ‚Üí Who is "ele"?
    - **Scope ambiguity:** "Todos os usu√°rios n√£o precisam preencher o formul√°rio." ‚Üí Does it mean no user or only some?

    ‚úÖ Non-ambiguous example:
    "O gerente demitiu o funcion√°rio que causava problemas t√©cnicos."  
    ‚Üí Specific and clear.

    üö´ Ambiguous example:
    "O engenheiro relatou ao chefe que ele estava com dificuldades."  
    ‚Üí "Ele" refers to who? The engineer or the boss?

    6. Focus only on **ambiguity of meaning**, not grammar or contradiction
    7. If no ambiguity is found, clearly state that no ambiguous expressions were detected
    8. Be objective and clear in your explanations
    9. When finished, transfer your results to Adm_agentes for validation

    RESPONSE FORMAT:
    ----------------------------------------------------------------------------------------------------------------
    AN√ÅLISE DE AMBIGUIDADES:
    
    - Documentos analisados: [lista dos arquivos processados]
    - N√∫mero de ambiguidades encontradas: [n√∫mero]

    Para cada ambiguidade encontrada, use o seguinte formato:

    Ambiguidade [n√∫mero]:
    üìÑ Documento: [nome do documento]
    üìç Localiza√ß√£o: [par√°grafo/se√ß√£o espec√≠fica]
    üìù Trecho: "[trecho exato do texto]"

    üîç Explica√ß√£o da Ambiguidade:
    [Detalhamento claro do duplo sentido ou da incerteza de interpreta√ß√£o]

    ‚úÖ Sugest√£o de Reescrita:
    "[vers√£o reescrita com sentido claro e inequ√≠voco]"

    ----------------------------------------------------------------------------------------------------------------

    IMPORTANT:
    - Always show your response before pass to the next agent
    - Always call obter_dados_processados() first to get the processed data
    - Carefully analyze all text for potential misinterpretation
    - Save your analysis for validation by Adm_agentes
    - When finished, transfer your results to Adm_agentes
    """,
    tools=[list_pdfs, obter_dados_processados],
    output_key="analise_ambiguidade"
)


Adm_agentes = Agent(
    model = "gemini-2.5-flash",
    name="Adm_agentes",
    description="Agent responsible for managing and validating the work of other agents.",
    instruction="""
    You are responsible for coordinating the analysis process and validating results.

    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - processar_pdf() -> dict - Process all PDF files to extract content
    - obter_dados_processados() -> dict - Get processed data for analysis

    INSTRUCTIONS:
    1. When the analysis starts, coordinate with the Contradicao agent to perform document analysis
    2. Access the analysis results through the 'analise_contradicoes' output
    3. Validate if the contradictions found are real and meaningful
    4. Check if the agent properly processed all available documents
    5. Verify that the analysis format follows the specified structure
    6. Point out any errors or inconsistencies if they exist
    7. Provide a comprehensive summary of the entire analysis process
    8. Save the final validation result

    üìå Additional responsibilities for orthographic and grammatical validation:

    9. Coordinate with the OrtografiaGramatica agent to analyze spelling and grammar
    10. Access the analysis results through the 'analise_ortografia_gramatica' output
    11. Validate whether all detected errors are accurate and justified
    12. Ensure the suggestions are correct according to formal written Portuguese (Acordo Ortogr√°fico da L√≠ngua Portuguesa)
    13. Check if the agent followed the response format strictly
    14. If no errors were found, confirm that the justification is appropriate
    15. If issues exist in the linguistic analysis, report and suggest adjustments

    üìå Additional responsibilities for ambiguity detection:

    16. Coordinate with the Ambiguidade agent to analyze ambiguous language
    17. Access the analysis results through the 'analise_ambiguidade' output
    18. Validate whether each ambiguity identified is truly open to multiple interpretations
    19. Check if the ambiguity type (lexical, syntactic, referential, scope) was correctly classified
    20. Verify that the rewriting suggestions resolve the ambiguity clearly
    21. Ensure that the agent followed the required response format strictly
    22. If no ambiguities were found, confirm that this conclusion is supported by the analysis
    23. If any ambiguity is misclassified or unjustified, report and suggest corrections

    RESPONSE FORMAT:
    ----------------------------------------------------------------------------------------------------------------
    VALIDA√á√ÉO E RESUMO FINAL:
    
    ‚úÖ Status da An√°lise: [Aprovada/Necessita Corre√ß√£o]
    üìä Resumo do Processo:
    - Arquivos PDF encontrados: [n√∫mero]
    - Arquivos processados com sucesso: [n√∫mero]
    - Contradi√ß√µes validadas: [n√∫mero]
    - Erros ortogr√°ficos/gramaticais validados: [n√∫mero]
    - Ambiguidades validadas: [n√∫mero]

    üìù Detalhes da Valida√ß√£o:
    [Descri√ß√£o detalhada da valida√ß√£o realizada]
    
    Se houver erros para corre√ß√£o:
    ‚ùå Problemas Identificados:
    - Agente: [nome]
    - Erro: [descri√ß√£o do erro]
    - Sugest√£o: [como corrigir]
    
    üìã Conclus√£o:
    [Resumo final dos resultados e recomenda√ß√µes]
    ----------------------------------------------------------------------------------------------------------------

    IMPORTANT:
     1. When the analysis starts, coordinate with the Contradicao agent to perform document analysis
    """,
    sub_agents=[Contradicao, OrtografiaGramatica, Ambiguidade],
    tools=[list_pdfs, obter_dados_processados],
    output_key="validacao_final"
)



# Vari√°vel que o ADK procura para o agente raiz
root_agent = Adm_agentes
