para mudar a llm para alguma externa ao gemini

trocar o model de cada agente para OpenAi_model
trocar a biblioteca que gerencia os agentes para Llmlite
tirar o comentario da OPENAI_API_KEY



def read_pdf(filename: str) -> str:
    """Try to detect strikethrough by visual elements."""
    document_path = os.path.join(BASE_PATH, filename)
    
    try:
        doc = fitz.open(document_path)
        texto_completo = ""
        
        for page_num in range(doc.page_count):
            page = doc[page_num]
            
            # Busca por linhas horizontais (possíveis riscos)
            drawings = page.get_drawings()
            strike_lines = []
            
            for drawing in drawings:
                # Verifica se é uma linha horizontal
                if drawing.get("type") == "l":  # linha
                    rect = drawing.get("rect")
                    if rect:  # Removido a verificação de espessura - aceita qualquer linha horizontal
                        strike_lines.append(fitz.Rect(rect))
            
            # Extrai texto e verifica sobreposição com linhas
            text_dict = page.get_text("dict")
            
            for block in text_dict["blocks"]:
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            text = span["text"]
                            span_rect = fitz.Rect(span["bbox"])
                            
                            # Verifica se há linha passando pelo meio do texto
                            is_struck = False
                            for strike_line in strike_lines:
                                if (strike_line.y0 > span_rect.y0 and 
                                    strike_line.y0 < span_rect.y1 and
                                    strike_line.intersects(span_rect)):
                                    is_struck = True
                                    break
                            
                            if is_struck:
                                texto_completo += f"<RISCADO>{text}</RISCADO>"
                            else:
                                texto_completo += text
                        texto_completo += "\n"
        
        doc.close()
        return texto_completo.strip()
        
    except Exception as e:
        return f"Erro ao ler PDF {filename}: {str(e)}"
    
    
def list_pdfs() -> list:
    """List all available PDF files."""
    try:
        if not os.path.exists(BASE_PATH):
            return []
        
        pdfs = [f for f in os.listdir(BASE_PATH) if f.lower().endswith('.pdf')]
        return pdfs
    
    except Exception as e:
        return [f"Erro ao listar arquivos: {str(e)}"]

def read_all_pdfs() -> dict:
    """Read all PDFs and return content dictionary."""
    resolucoes_disponiveis = list_pdfs()
    conteudos = {}
    
    for resolucao in resolucoes_disponiveis:
        try:
            conteudo = read_pdf(resolucao)
            conteudos[resolucao] = conteudo
        except Exception as e:
            conteudos[resolucao] = f"Erro ao ler: {str(e)}"
    
    return conteudos


--------------------------------------------------------------------------------------------------------------


# Imports corretos para Google ADK
from google.adk.agents import LlmAgent
from google.adk.agents import Agent
from google.adk.models.lite_llm import LiteLlm
import os
import PyPDF2
import fitz  # PyMuPDF
from pathlib import Path
from dotenv import load_dotenv
import base64
from io import BytesIO
from PIL import Image
import json

load_dotenv()

OpenAi_model = LiteLlm(
    model = "gpt-4o", 
    api_key = os.getenv('OPENAI_API_KEY')
)

# Configuração dos caminhos
BASE_PATH = r"D:\cod\Arsae\Adk\Projeto_Adk_resolucoes\Adm_agentes\documentos"
IMAGES_PATH = os.path.join(BASE_PATH, "images")

def list_pdfs() -> list:
    """List all available PDF files."""
    try:
        if not os.path.exists(BASE_PATH):
            return []
        
        pdfs = [f for f in os.listdir(BASE_PATH) if f.lower().endswith('.pdf')]
        return pdfs
    
    except Exception as e:
        return [f"Erro ao listar arquivos: {str(e)}"]
    





Data_maker = Agent(
    model = "gemini-2.0-flash",
    name="Data_maker",
    description="Agent responsible for reading and processing PDFs and convert them into a format suitable for analysis.",
    instruction=f"""
    You are a specialist in reading and processing PDFs and remove Strikethrough text.
    I will give you a couple of PDFs, and you must to convert them into a string format that can be used for analysis.

    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files

    INSTRUCTIONS:
    1- First, list all available PDFs using list_pdfs()
    2- 
    3- 
    4- Clean the text by removing strikethrough content and formatting properly
    5- Create a comprehensive string with all document content for analysis
    6- Be objective and clear in your responses
    7- Pay attention to strikethrough text - this text needs to be removed from the final string
    8- When activated, you must perform your analysis without waiting for additional instructions
    9- After you finish your analysis, pass the data to the Contradicao agent for analysis

    Important:
    - Process all documents systematically
    - Ensure text quality and readability
    - Remove any strikethrough or invalid content
    - After finishing, pass control to the Contradicao agent
    """,
    tools=[ list_pdfs],
    output_key="Data_for_analysis"
)

Contradicao = LiteLlm(
    model = "OpenAI_model", 
    name="Contradicao",
    description="Agent responsible for analyzing contradictions in resolutions.",
    instruction=f"""
    You are a specialist in finding contradictions in documents.
    
    Start by reading the available PDFs in the directory and writing their names with that format:

    DOCUMENTOS DISPONÍVEIS: {', '.join(list_pdfs())}
    
    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - read_pdf_text(filename: str) -> dict - Read text from specific PDF
    - process_all_pdfs() -> dict - Process all PDFs at once
    - get_document_articles(filename: str) -> list - Extract articles from document
    - save_analysis_result(agent_name: str, result: dict) -> bool - Save analysis results
  
    INSTRUCTIONS:

    1- Use process_all_pdfs() to get all document content
    2- Use get_document_articles() for each document to extract articles systematically
    3- Analyze the PDFs looking for contradictions between resolutions, these contradictions can be in one or more documents
    4- Check all resolutions between all documents
    5- A contradiction is when one resolution says something and another says the opposite
    6- Cite the specific excerpts from the documents where the contradictions occur
    7- Do not point out grammar errors, or say anything other than what was requested - only content contradictions
    8- If you don't find contradictions, inform that there are no contradictions - this is a valid response
    9- Use the available documents for your analysis
    10- Be objective and clear in your responses
    11- When activated, you must perform your analysis without waiting for additional instructions
    12- After you finish your analysis, pass to the Adm_agentes agent for validation
    13- Check the Data_for_analysis state for the data to be analyzed
    14- Save your results using save_analysis_result()

    RESPONSE FORMAT:
    ----------------------------------------------------------------------------------------------------------------
    ANÁLISE DE CONTRADIÇÕES:
    
    - Documentos analisados: [lista]
    - Número de contradições: [número]
    
    For each contradiction found, use the following format:
    - Contradição [número]:

        -  [nome do documento]
            Número do artigo: [número do artigo] (ex: Art. 1)

            - [trecho]

        -  [nome do documento]
            Número do artigo: [número do artigo] (ex: Art. 1)

            - [trecho]

        - Explicação:
        
        [detalhes da contradição]
    ----------------------------------------------------------------------------------------------------------------

    IMPORTANT:
        After you finish your analysis, you must pass to the Adm_agentes agent for validation
        You must check the Data_for_analysis state for the data to be analyzed
        Save your analysis results for future reference

    """,
    tools=[list_pdfs],
    output_key="analise_contradicoes"
)

Adm_agentes = LiteLlm(
    model = "OpenAI_model",	 
    name="Adm_agentes",
    description="Agent responsible for managing and validating the work of other agents.",
    instruction="""
    Your task is to ensure that the Contradicao agent has performed its work correctly and that the contradictions found are valid.

    IMPORTANT: Access the previous analysis through the state 'analise_contradicoes'.

    Functions available for you to use:
    - list_pdfs() -> list - List all available PDF files
    - save_analysis_result(agent_name: str, result: dict) -> bool - Save validation results

    INSTRUCTIONS:
    1. When the chat starts, pass control to the Data_maker agent to perform its analysis
    2. Check if the work of the Contradicao agent is correct
    3. Validate if the contradictions found are real and meaningful
    4. Point out errors if they exist
    5. After all agents have finished their work, validate the final result
    6. Save the final validation result
    7. Provide a comprehensive summary of the entire analysis process

    RESPONSE FORMAT:
    ----------------------------------------------------------------------------------------------------------------
    VALIDAÇÃO DO TRABALHO:
    - Trabalho desenvolvido corretamente: [Sim/Não]
    - Resumo do processo: [descrição]
    - Documentos processados: [lista]
    - Contradições validadas: [número]
    
    If not correct:
    - Agente: [nome]
    - Erro encontrado: [descrição]
    - Trecho incorreto: [citação]
    - Sugestão de correção: [descrição]
    ----------------------------------------------------------------------------------------------------------------
    """,
    sub_agents=[Contradicao, Data_maker],
    tools=[list_pdfs],
    output_key="validacao_final"
)

# Variável que o ADK procura para o agente raiz
root_agent = Adm_agentes